# Generated by Django 5.2.7 on 2025-10-30 12:26

import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def set_sample_biomes_from_first_study(apps, schema_editor):
    """
    Set the biome field on each sample to point at the biome of the first related study.
    """
    Sample = apps.get_model("analyses", "Sample")

    # Get all samples that have studies
    samples = Sample.objects.prefetch_related("studies").all()

    samples_to_update = []
    for sample in samples:
        # Get the first study (if any)
        first_study = sample.studies.first()
        if first_study and first_study.biome:
            sample.biome = first_study.biome
            samples_to_update.append(sample)

    # Bulk update for efficiency
    if samples_to_update:
        Sample.objects.bulk_update(samples_to_update, ["biome"])


def reverse_sample_biomes(apps, schema_editor):
    """
    Clear the biome field on all samples (reverse operation).
    """
    Sample = apps.get_model("analyses", "Sample")
    Sample.objects.update(biome=None)


class Migration(migrations.Migration):
    dependencies = [
        ("analyses", "0050_superstudygenomecatalogue_and_more"),
        ("ena", "0004_alter_sample_additional_accessions_and_more"),
        ("ena", "0005_study_metadata"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name="sample",
            name="ena_sample",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="analyses_samples",
                to="ena.sample",
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="metadata",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name="study",
            name="ena_study",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="analyses_studies",
                to="ena.study",
            ),
        ),
        migrations.AlterField(
            model_name="sample",
            name="studies",
            field=models.ManyToManyField(related_name="samples", to="analyses.study"),
        ),
        migrations.AddField(
            model_name="sample",
            name="sample_title",
            field=models.GeneratedField(
                db_persist=True,
                expression=models.Func(
                    models.Value("sample_title"),
                    function="jsonb_extract_path_text",
                    template="(jsonb_extract_path_text(metadata, %(expressions)s))",
                ),
                null=True,
                output_field=models.TextField(),
            ),
        ),
        django.contrib.postgres.operations.TrigramExtension(),
        migrations.AddIndex(
            model_name="sample",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["sample_title"],
                name="idx_sample_title_trgm",
                opclasses=["gin_trgm_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="publication",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["title"],
                name="idx_publication_title_trgm",
                opclasses=["gin_trgm_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="study",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["title"],
                name="idx_study_title_trgm",
                opclasses=["gin_trgm_ops"],
            ),
        ),
        migrations.AddField(
            model_name="sample",
            name="biome",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="analyses.biome",
            ),
        ),
        migrations.RunPython(
            code=set_sample_biomes_from_first_study,
            reverse_code=reverse_sample_biomes,
        ),
    ]
