---
apiVersion: v1
kind: List
items:
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: emgapiv2-hl-exp
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: proxy-config
      namespace: emgapiv2-hl-exp
    data:
      HTTP_PROXY: "http://hh-wwwcache.ebi.ac.uk:3128"
      HTTPS_PROXY: "http://hh-wwwcache.ebi.ac.uk:3128"
      http_proxy: "http://hh-wwwcache.ebi.ac.uk:3128"
      https_proxy: "http://hh-wwwcache.ebi.ac.uk:3128"
      no_proxy: "localhost,.cluster.local"
  ###############################
  #### APP/API               ####
  ###############################
  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: emgapi-vol-nfs
      namespace: emgapiv2-hl-exp
    spec:
      capacity:
        storage: 10Gi
      volumeMode: Filesystem
      accessModes:
        - ReadWriteMany
      mountOptions:
        - nfsvers=3
      nfs:
        server: hh-isi-srv-vlan1496.ebi.ac.uk
        path: /ifs/public/rw/metagenomics/mgnify/deployments/apiv2/DEV
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: emgapi-volume-claim-3
      namespace: emgapiv2-hl-exp
    spec:
      storageClassName: ""
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 3Gi
      volumeName: emgapi-vol-nfs
  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: emgapi-vol-nfs-services
      namespace: emgapiv2-hl-exp
    spec:
      capacity:
        storage: 10Gi
      volumeMode: Filesystem
      accessModes:
        - ReadOnlyMany
      mountOptions:
        - nfsvers=3
      nfs:
        server: hh-isi-srv-vlan1496.ebi.ac.uk
        path: /ifs/public/services/metagenomics/results
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: emgapi-services-volume-claim-1
      namespace: emgapiv2-hl-exp
    spec:
      storageClassName: ""
      accessModes:
        - ReadOnlyMany
      resources:
        requests:
          storage: 3Gi
      volumeName: emgapi-vol-nfs-services

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: emgapi-config
      namespace: emgapiv2-hl-exp
    data:
      DJANGO_SETTINGS_MODULE: "emgapiv2.settings"
      PREFECT_UI_URL: "http://prefect-dev.mgnify.org"
      PREFECT_API_URL: "http://prefect-server.emgapiv2-hl-exp.svc.cluster.local:4200/api"
      PREFECT_HOME: "/app/data/prefect"
      EMG_SLURM__SHARED_FILESYSTEM_ROOT_ON_SLURM: "/nfs/public/rw/metagenomics/mgnify/deployments/apiv2/DEV"
      EMG_SLURM__SHARED_FILESYSTEM_ROOT_ON_SERVER: "/app/data"
      EMG_SLURM__SAMPLESHEET_EDITING_ALLOWED_INSIDE: "/nfs/production/rdf/metagenomics/projects/automation/slurm_workdir"
      EMG_SLURM__SAMPLE_EDITING_PATH_FROM_SHARED_FILESYSTEM: "temporary_samplesheet_edits"
      EMG_SLURM__DEFAULT_WORKDIR: "/nfs/production/rdf/metagenomics/projects/automation/slurm_workdir"
      EMG_SERVICE_URLS__TRANSFER_SERVICES_URL_ROOT: "https://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_results/"
      EMG_SERVICE_URLS__PRIVATE_DATA_URL_ROOT: "https://www.ebi.ac.uk/metagenomics/api/v2/private-data/"
      EMG_SERVICE_URLS__BASE_URL: "metagenomics/api/v2"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: emgapiv2-app
      namespace: emgapiv2-hl-exp
      labels:
        app: emgapiv2
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: emgapi
      template:
        metadata:
          labels:
            app: emgapi
        spec:
          securityContext:
            runAsUser: 7123
            runAsGroup: 1347
          volumes:
            - name: emgapi-app-storage
              persistentVolumeClaim:
                claimName: emgapi-volume-claim-3
            - name: emgapi-results-storage
              persistentVolumeClaim:
                claimName: emgapi-services-volume-claim-1
          containers:
            - image: quay.io/microbiome-informatics/emgapiv2:ebi-wp-k8s-hl
              imagePullPolicy: Always
              name: emgapi
              envFrom:
                - secretRef:
                    name: emgapi-secret
                - configMapRef:
                    name: emgapi-config
                - configMapRef:
                    name: proxy-config
              env:
                - name: PREFECT_API_AUTH_STRING
                  valueFrom:
                    secretKeyRef:
                      key: PREFECT_SERVER_API_AUTH_STRING
                      name: emgapi-secret
              ports:
                - containerPort: 8000
                  name: gunicorn
              volumeMounts:
                - mountPath: "/app/data"
                  name: emgapi-app-storage
                - mountPath: "/results"
                  name: emgapi-results-storage
          imagePullSecrets:
            - name: quay-pull-secret
          nodeSelector:
            mgnify.org/ebi-db-pgsql-hlvm-090-open: "true"
  - apiVersion: v1
    kind: Service
    metadata:
      name: emgapiv2
      namespace: emgapiv2-hl-exp
      labels:
        app: emgapi
    spec:
      type: NodePort
      selector:
        app: emgapi
      ports:
        - port: 8000
          targetPort: 8000
          protocol: TCP
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: emgapi-redirect-ingress
      namespace: emgapiv2-hl-exp
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$1
        nginx.ingress.kubernetes.io/permanent-redirect: "https://www.ebi.ac.uk/metagenomics/api/v2/$1"
        nginx.ingress.kubernetes.io/permanent-redirect-code: "301"
    spec:
      rules:
        - host: apiv2-dev.mgnify.org
          http:
            paths:
              - path: /(.*)
                pathType: ImplementationSpecific
                backend:
                  service:
                    name: dummy-service
                    port:
                      number: 80
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: emgapi-ingress
      namespace: emgapiv2-hl-exp
      annotations:
        kubernetes.io/ingress.class: "nginx"
    spec:
      rules:
        - host: www.ebi.ac.uk
          http:
            paths:
              - path: /metagenomics/api/v2
                pathType: Prefix
                backend:
                  service:
                    name: emgapiv2
                    port:
                      number: 8000

  ###############################
  #### PREFECT SERVER        ####
  ###############################
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: prefect-server
      namespace: emgapiv2-hl-exp
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: prefect-server
      template:
        metadata:
          labels:
            app: prefect-server
        spec:
          containers:
            - name: prefect-server
              image: prefecthq/prefect:3.4.4-python3.12
              resources:
                requests:
                  memory: "4Gi"
                  cpu: "2000m"
              imagePullPolicy: IfNotPresent
              command: ["/opt/prefect/entrypoint.sh"]
              args: ["prefect", "server", "start"]
              envFrom:
                - configMapRef:
                    name: proxy-config
              env:
                - name: PREFECT_UI_URL
                  value: http://prefect-dev.mgnify.org
                - name: PREFECT_API_URL
                  value: http://prefect-dev.mgnify.org/api
                - name: PREFECT_UI_API_URL
                  value: http://prefect-dev.mgnify.org/api
                - name: PREFECT_SERVER_API_HOST
                  value: 0.0.0.0
                - name: PREFECT_API_DATABASE_CONNECTION_URL
                  valueFrom:
                    secretKeyRef:
                      key: PREFECT_API_DATABASE_CONNECTION_URL
                      name: emgapi-secret
                - name: PREFECT_SERVER_API_AUTH_STRING
                  valueFrom:
                    secretKeyRef:
                      key: PREFECT_SERVER_API_AUTH_STRING
                      name: emgapi-secret
                - name: EXTRA_PIP_PACKAGES
                  value: httpx[cli] nextflowpy
                - name: PREFECT_LOCAL_STORAGE_PATH
                  value: /app/data/prefect/storage
                - name: PREFECT_LOGGING_LEVEL
                  value: DEBUG
                - name: CURL_CA_BUNDLE  # for prefect-slack
                  value: ""
                - name: PYTHONHTTPSVERIFY  # for prefect-slack
                  value: "false"
              ports:
                - containerPort: 4200
          nodeSelector:
            mgnify.org/ebi-db-pgsql-hlvm-090-open: "true"
  - apiVersion: v1
    kind: Service
    metadata:
      name: prefect-server
      namespace: emgapiv2-hl-exp
    spec:
      type: ClusterIP
      ports:
        - port: 4200
          targetPort: 4200
      selector:
        app: prefect-server

  #### Serve prefect to auth'd users (prefect handles the auth via http basic) ####
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: prefect-ingress
      namespace: emgapiv2-hl-exp
    spec:
      ingressClassName: nginx
      rules:
        - host: prefect-dev.mgnify.org
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: prefect-server
                    port:
                      number: 4200

  #### Website
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: webclient-nginx-config
      namespace: emgapiv2-hl-exp
    data:
      nginx.conf: >-
        events {
          worker_connections 1024;
        }
        http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
          server {
            listen 80;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;

            # Gzip compression
            gzip on;
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

            # Security headers
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";

            # Health check endpoint
            location /health {
              access_log off;
              return 200 "healthy\n";
            }

            # Handle React routing
            location /metagenomics/v6-early-data-release {
              alias /usr/share/nginx/html;
              try_files $uri $uri/ /index.html;
            }
            location ~ ^/metagenomics/v6-early-data-release/.*/((?:css|js|static)/(.+))$ {
              alias /usr/share/nginx/html/$1;
            }
          }
        }
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: webclient-config
      namespace: emgapiv2-hl-exp
    data:
      config.private.json: >-
        {
          "api": "https://www.ebi.ac.uk/metagenomics/api/v1/",
          "api_v2": "https://www.ebi.ac.uk/metagenomics/api/v2/",
          "website": "https://www.ebi.ac.uk/metagenomics/v6-early-data-release/",
          "basename": "/metagenomics/v6-early-data-release"
        }
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: npm-cache-pvc
      namespace: emgapiv2-hl-exp
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "8Gi"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: webclient-deployment
      namespace: emgapiv2-hl-exp
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: webclient-app
      template:
        metadata:
          labels:
            app: webclient-app
        spec:
          volumes:
            - name: webclient-storage
              emptyDir: {}
            - name: nginx-config-volume
              configMap:
                name: webclient-nginx-config
            - name: webclient-config-volume
              configMap:
                name: webclient-config
            - name: npm-cache
              persistentVolumeClaim:
                claimName: npm-cache-pvc
          containers:
            - name: webclient-app
              image: quay.io/microbiome-informatics/nginx:1.26
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 80
              resources:
                requests:
                  cpu: "500m"
                  memory: "256Mi"
                limits:
                  cpu: "1"
                  memory: "1Gi"
              volumeMounts:
                - name: webclient-storage
                  mountPath: /usr/share/nginx/html
                  subPath: html
                - name: nginx-config-volume
                  mountPath: /etc/nginx/nginx.conf
                  subPath: nginx.conf
                - name: webclient-config-volume
                  mountPath: /var/config.private.json
                  subPath: config.private.json
              livenessProbe:
                httpGet:
                  path: /
                  port: http
                initialDelaySeconds: 60
                periodSeconds: 600
          initContainers:
            - name: webclient-build
              image: quay.io/microbiome-informatics/node:22
              imagePullPolicy: IfNotPresent
              resources:
                requests:
                  cpu: "2"
                  memory: "2Gi"
              volumeMounts:
                - name: webclient-storage
                  mountPath: /usr/share/nginx/html
                  subPath: html
                - name: webclient-config-volume
                  mountPath: /var/config.private.json
                  subPath: config.private.json
                - name: npm-cache
                  mountPath: /root/.npm
              envFrom:
                - configMapRef:
                    name: proxy-config
                    optional: true
                - configMapRef:
                    name: webclient-nginx-config
              command: ["/bin/sh"]
              args:
                - -c
                - >-
                  rm -rf v6-early-access &&
                  git clone -b v6-early-access --single-branch https://github.com/EBI-Metagenomics/ebi-metagenomics-client.git && cd ebi-metagenomics-client &&
                  cp /var/config.private.json . &&
                  npm ci && npm run build &&
                  cp -r dist/* /usr/share/nginx/html
  - apiVersion: v1
    kind: Service
    metadata:
      name: webclient
      namespace: emgapiv2-hl-exp
      labels:
        app: webclient-app
    spec:
      type: NodePort
      selector:
        app: webclient-app
      ports:
        - port: 80
          targetPort: 80
          protocol: TCP
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: emg-edr-webclient-ingress
      namespace: emgapiv2-hl-exp
      annotations:
        kubernetes.io/ingress.class: "nginx"
    spec:
      rules:
        - host: "www.ebi.ac.uk"
          http:
            paths:
              - path: /metagenomics/v6-early-data-release
                pathType: Prefix
                backend:
                  service:
                    name: webclient
                    port:
                      number: 80
  ###############################
  #### PRIVATE DATA SERVER   ####
  ###############################
  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: private-data-vol-nfs
      namespace: emgapiv2-hl-exp
    spec:
      capacity:
        storage: 10Gi
      volumeMode: Filesystem
      accessModes:
        - ReadOnlyMany
      mountOptions:
        - nfsvers=3
      nfs:
        server: hh-isi-srv-vlan1496.ebi.ac.uk
        path: /ifs/public/services/metagenomics/results
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: private-data-volume-claim
      namespace: emgapiv2-hl-exp
    spec:
      storageClassName: ""
      accessModes:
        - ReadOnlyMany
      resources:
        requests:
          storage: 3Gi
      volumeName: private-data-vol-nfs
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: private-data-nginx-config
      namespace: emgapiv2-hl-exp
    data:
      nginx.conf: >-
        worker_processes  1;

        events {
            worker_connections  1024;
        }

        env SECURE_LINK_SECRET;

        http {
            include       mime.types;
            default_type  application/octet-stream;
            sendfile        on;
            keepalive_timeout  65;

            error_log  /usr/local/openresty/nginx/logs/error.log debug;
            access_log /usr/local/openresty/nginx/logs/access.log combined;

        	lua_shared_dict secrets 1m;

            init_by_lua_block {
                local hmac = require "resty.hmac"
                local str = require "resty.string"

                local secret = os.getenv("SECURE_LINK_SECRET")
                if not secret then error("SECURE_LINK_SECRET env var not set") end

                ngx.shared.secrets:set("secret", secret)
            }

        	server {
          		listen 80;

          		location /private-data/ {

                    access_by_lua_block {
                        local uri = ngx.var.uri
        				local unsigned_uri = string.sub(uri, string.len("/private-data/") + 1)

                        local args = ngx.req.get_uri_args()
                        local expires = args.expires
                        local sig = args.token

                        if not (expires and sig) then
                            return ngx.exit(ngx.HTTP_FORBIDDEN)
                        end
                        if tonumber(expires) < ngx.time() then
                            return ngx.exit(ngx.HTTP_GONE)
                        end

        				ngx.log(ngx.INFO, "Checking ", unsigned_uri, expires, sig)

                        local secret = ngx.shared.secrets:get("secret")
                        local h = require("resty.hmac"):new(secret, require("resty.hmac").ALGOS.SHA256)
                        h:update(unsigned_uri .. expires)
                        local expected = require("resty.string").to_hex(h:final())

                        if expected ~= sig then
                            return ngx.exit(ngx.HTTP_FORBIDDEN)
                        end
                    }

            		alias /var/www/private-data/;
            	}

                # Health check endpoint
                location /health {
                    return 200 'OK';
                }

                # Redirect root to health check
                location = / {
                    return 301 /health;
                }

                # Error pages
                error_page   500 502 503 504  /50x.html;
                location = /50x.html {
                    root   html;
                }
            }
        }

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: private-data-server
      namespace: emgapiv2-hl-exp
      labels:
        app: private-data-server
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: private-data-server
      template:
        metadata:
          labels:
            app: private-data-server
        spec:
          volumes:
            - name: private-data-storage
              persistentVolumeClaim:
                claimName: private-data-volume-claim
            - name: nginx-config
              configMap:
                name: webclient-nginx-config
          containers:
            - name: private-data-server
              image: openresty/openresty:1.25.3.2-5-alpine-fat
              imagePullPolicy: IfNotPresent
              command: ["/bin/sh -c \"opm get jkeys089/lua-resty-hmac && openresty -g 'daemon off;'\""]

              envFrom:
                - secretRef:
                    name: emgapi-secret
              ports:
                - containerPort: 80
              resources:
                requests:
                  cpu: "500m"
                  memory: "256Mi"
                limits:
                  cpu: "1"
                  memory: "1Gi"
              volumeMounts:
                - name: private-data-storage
                  mountPath: /var/www/private-data
                - name: nginx-config
                  mountPath: /usr/local/openresty/nginx/conf/nginx.conf
                  subPath: nginx.conf
              livenessProbe:
                httpGet:
                  path: /health
                  port: 80
                initialDelaySeconds: 30
                periodSeconds: 300
  - apiVersion: v1
    kind: Service
    metadata:
      name: private-data-server
      namespace: emgapiv2-hl-exp
      labels:
        app: private-data-server
    spec:
      type: NodePort
      selector:
        app: private-data-server
      ports:
        - port: 80
          targetPort: 80
          protocol: TCP
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: private-data-server-ingress
      namespace: emgapiv2-hl-exp
      annotations:
        kubernetes.io/ingress.class: "nginx"
    spec:
      rules:
        - host: "www.ebi.ac.uk"
          http:
            paths:
              - path: /metagenomics/api/v2/private-data
                pathType: Prefix
                backend:
                  service:
                    name: private-data-server
                    port:
                      number: 80
