"""
Django settings for emgapiv2 project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import logging
import os
from pathlib import Path

import dj_database_url
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

from emgapiv2.config import EMGConfig

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "insecure-dev-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


def show_toolbar(request):
    return False


DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": "emgapiv2.settings.show_toolbar",
}


ALLOWED_HOSTS = ["apiv2-dev.mgnify.org", "localhost"]


emg_config_env = os.getenv("EMG_ENV_FILE")
if emg_config_env:
    logging.warning(f"Using environment from {emg_config_env}")
EMG_CONFIG: EMGConfig = EMGConfig(_env_file=emg_config_env)


# Application definition

INSTALLED_APPS = [
    "unfold",
    # "unfold.contrib.filters"
    # "unfold.contrib.forms",
    # "unfold.contrib.import_export",  # optional, if django-import-export package is used
    # "unfold.contrib.guardian",  # optional, if django-guardian package is used
    # "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_ltree",  ## for hierarchical models like Biome
    "debug_toolbar",
    "ena",
    "analyses",
    "workflows",
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "emgapiv2.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "emgapiv2.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


DATABASES = {
    "default": dj_database_url.config(
        conn_max_age=600,
        conn_health_checks=True,
        default="postgres://postgres:postgres@localhost:5432/emg_test",
    ),
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field annotation_type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


def get_environment(request):
    return [EMG_CONFIG.environment, "info" if DEBUG else "warning"]


UNFOLD = {
    "SITE_ICON": {
        "light": lambda request: static(
            "img/icons/mgnify_lettermark_dark_on_light.png"
        ),
        "dark": lambda request: static("img/icons/mgnify_lettermark_light_on_dark.png"),
    },
    "SITE_LOGO": {
        "light": lambda request: static("img/icons/mgnify_wordmark_dark_on_light.png"),
        "dark": lambda request: static("img/icons/mgnify_wordmark_light_on_dark.png"),
    },
    "ENVIRONMENT": "emgapiv2.settings.get_environment",
    "SITE_TITLE": "MGnify Production",
    "SITE_HEADER": "MGnify Production",
    "COLORS": {
        "primary": {
            "900": "8 80 37",
            "800": "11 99 47",
            "700": "15 117 56",
            "600": "19 134 66",
            "500": "24 151 76",
            "400": "59 170 80",
            "300": "98 188 95",
            "200": "150 205 131",
            "100": "#194 221 168",
            "050": "228 237 206",
        },
    },
    "SIDEBAR": {
        "show_search": True,
        "navigation": [
            {
                "title": _("EMG DB Admin"),
                "separator": True,
                "items": [
                    {
                        "title": _("DB Admin dashboard"),
                        "icon": "database",
                        "link": reverse_lazy("admin:index"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            {
                "title": _("Flow automation"),
                "separator": True,
                "items": [
                    {
                        "title": _("Prefect Flows dashboard"),
                        "icon": "rebase",
                        "link": os.getenv("PREFECT_API_URL", "").replace(
                            "api", "dashboard"
                        ),
                    },
                ],
            },
            {
                "title": _("Public facing"),
                "separator": True,
                "items": [
                    {
                        "title": _("MGnify API"),
                        "icon": "code",
                        "link": reverse_lazy("api:api-root"),
                    },
                    {
                        "title": _("MGnify Website"),
                        "icon": "home",
                        "link": "https://www.ebi.ac.uk/metagenomics",
                    },
                    {
                        "title": _("MGnify Docs"),
                        "icon": "help_center",
                        "link": "https://docs.mgnify.org",
                    },
                ],
            },
        ],
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler", "level": "DEBUG"},
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
        "propagate": True,
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "prefect": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django.db.backends": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "django.utils.autoreload": {
            "level": "INFO",
        },
        "django.template.base": {"level": "INFO"},
        "graphviz": {"level": "INFO"},
        "": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

NINJA_PAGINATION_CLASS = "ninja.pagination.PageNumberPagination"
