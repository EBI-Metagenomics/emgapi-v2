# Generated by Django 5.2 on 2025-05-11 19:57

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('analyses', '0041_analysis_external_results_dir_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='GenomeAntiSmashGC',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_column='NAME', max_length=80)),
                ('description', models.CharField(db_column='DESCRIPTION', max_length=80)),
            ],
            options={
                'verbose_name_plural': 'antiSMASH clusters',
                'db_table': 'genome_anitsmash_genecluster',
            },
        ),
        migrations.CreateModel(
            name='GenomeCogCat',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_column='NAME', max_length=80, unique=True)),
                ('description', models.CharField(db_column='DESCRIPTION', max_length=80)),
            ],
            options={
                'verbose_name_plural': 'COG categories',
                'db_table': 'genome_cog_category',
            },
        ),
        migrations.CreateModel(
            name='GenomeKeggModule',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_column='MODULE_NAME', max_length=10, unique=True)),
                ('description', models.CharField(db_column='DESCRIPTION', max_length=200)),
            ],
            options={
                'db_table': 'genome_kegg_module',
            },
        ),
        migrations.CreateModel(
            name='GeographicLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='CONTINENT', max_length=80, unique=True)),
            ],
            options={
                'db_table': 'geographic_range',
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('genome_id', models.AutoField(db_column='GENOME_ID', primary_key=True, serialize=False)),
                ('accession', models.CharField(db_column='GENOME_ACCESSION', max_length=40, unique=True)),
                ('ena_genome_accession', models.CharField(blank=True, db_column='ENA_GENOME_ACCESSION', max_length=20, null=True, unique=True)),
                ('ena_sample_accession', models.CharField(blank=True, db_column='ENA_SAMPLE_ACCESSION', max_length=20, null=True)),
                ('ena_study_accession', models.CharField(db_column='ENA_STUDY_ACCESSION', max_length=20, null=True)),
                ('ncbi_genome_accession', models.CharField(blank=True, db_column='NCBI_GENOME_ACCESSION', max_length=20, null=True, unique=True)),
                ('ncbi_sample_accession', models.CharField(blank=True, db_column='NCBI_SAMPLE_ACCESSION', max_length=20, null=True)),
                ('ncbi_study_accession', models.CharField(blank=True, db_column='NCBI_STUDY_ACCESSION', max_length=20, null=True)),
                ('img_genome_accession', models.CharField(blank=True, db_column='IMG_GENOME_ACCESSION', max_length=20, null=True, unique=True)),
                ('patric_genome_accession', models.CharField(blank=True, db_column='PATRIC_GENOME_ACCESSION', max_length=20, null=True, unique=True)),
                ('genome_set', models.JSONField(blank=True, db_column='GENOME_SET_JSON', help_text='A JSON object with keys: "id" and "name" representing the genome set.', null=True)),
                ('length', models.IntegerField(db_column='LENGTH')),
                ('num_contigs', models.IntegerField(db_column='N_CONTIGS')),
                ('n_50', models.IntegerField(db_column='N50')),
                ('gc_content', models.FloatField(db_column='GC_CONTENT')),
                ('type', models.CharField(choices=[('mag', 'MAG'), ('isolate', 'Isolate')], db_column='TYPE', max_length=80)),
                ('completeness', models.FloatField(db_column='COMPLETENESS')),
                ('contamination', models.FloatField(db_column='CONTAMINATION')),
                ('busco_completeness', models.FloatField(blank=True, db_column='BUSCO_COMPLETENESS', null=True)),
                ('rna_5s', models.FloatField(blank=True, db_column='RNA_5S', null=True)),
                ('rna_16s', models.FloatField(blank=True, db_column='RNA_16S', null=True)),
                ('rna_23s', models.FloatField(blank=True, db_column='RNA_23S', null=True)),
                ('rna_5_8s', models.FloatField(blank=True, db_column='RNA_5_8S', null=True)),
                ('rna_18s', models.FloatField(blank=True, db_column='RNA_18S', null=True)),
                ('rna_28s', models.FloatField(blank=True, db_column='RNA_28S', null=True)),
                ('trnas', models.FloatField(db_column='T_RNA')),
                ('nc_rnas', models.IntegerField(db_column='NC_RNA')),
                ('num_proteins', models.IntegerField(db_column='NUM_PROTEINS')),
                ('eggnog_coverage', models.FloatField(db_column='EGGNOG_COVERAGE')),
                ('ipr_coverage', models.FloatField(db_column='IPR_COVERAGE')),
                ('taxon_lineage', models.CharField(db_column='TAXON_LINEAGE', max_length=400)),
                ('num_genomes_total', models.IntegerField(blank=True, db_column='PANGENOME_TOTAL_GENOMES', null=True)),
                ('pangenome_size', models.IntegerField(blank=True, db_column='PANGENOME_SIZE', null=True)),
                ('pangenome_core_size', models.IntegerField(blank=True, db_column='PANGENOME_CORE_PROP', null=True)),
                ('pangenome_accessory_size', models.IntegerField(blank=True, db_column='PANGENOME_ACCESSORY_PROP', null=True)),
                ('last_update', models.DateTimeField(auto_now=True, db_column='LAST_UPDATE')),
                ('first_created', models.DateTimeField(auto_now_add=True, db_column='FIRST_CREATED')),
                ('result_directory', models.CharField(blank=True, db_column='RESULT_DIRECTORY', max_length=100, null=True)),
                ('biome', models.ForeignKey(db_column='BIOME_ID', on_delete=django.db.models.deletion.CASCADE, to='analyses.biome')),
            ],
            options={
                'db_table': 'GENOME',
            },
        ),
        migrations.CreateModel(
            name='GenomeAntiSmashGCCounts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genome_count', models.IntegerField(db_column='GENOME_COUNT')),
                ('antismash_genecluster', models.ForeignKey(db_column='ANTISMASH_GENECLUSTER', on_delete=django.db.models.deletion.DO_NOTHING, to='genomes.genomeantismashgc')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='genomes.genome')),
            ],
            options={
                'db_table': 'genome_anitsmash_genecluster_counts',
                'unique_together': {('genome', 'antismash_genecluster')},
            },
        ),
        migrations.AddField(
            model_name='genome',
            name='antismash_geneclusters',
            field=models.ManyToManyField(through='genomes.GenomeAntiSmashGCCounts', to='genomes.genomeantismashgc'),
        ),
        migrations.CreateModel(
            name='GenomeCatalogue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('catalogue_id', models.SlugField(db_column='CATALOGUE_ID', max_length=100)),
                ('version', models.CharField(db_column='VERSION', max_length=20)),
                ('name', models.CharField(db_column='NAME', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, db_column='DESCRIPTION', help_text='Use <a href="https://commonmark.org/help/" target="_newtab">markdown</a> for links and rich text.', null=True)),
                ('protein_catalogue_name', models.CharField(blank=True, db_column='PROTEIN_CATALOGUE_NAME', max_length=100, null=True)),
                ('protein_catalogue_description', models.TextField(blank=True, db_column='PROTEIN_CATALOGUE_DESCRIPTION', help_text='Use <a href="https://commonmark.org/help/" target="_newtab">markdown</a> for links and rich text.', null=True)),
                ('last_update', models.DateTimeField(db_column='LAST_UPDATE', default=django.utils.timezone.now)),
                ('result_directory', models.CharField(blank=True, db_column='RESULT_DIRECTORY', max_length=100, null=True)),
                ('genome_count', models.IntegerField(blank=True, db_column='GENOME_COUNT', help_text='Number of genomes available in the web database (species-level cluster reps only)', null=True)),
                ('unclustered_genome_count', models.IntegerField(blank=True, db_column='UNCLUSTERED_GENOME_COUNT', help_text='Total number of genomes in the catalogue (including cluster reps and members)', null=True)),
                ('ftp_url', models.CharField(db_column='FTP_URL', default='http://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/', max_length=200)),
                ('pipeline_version_tag', models.CharField(db_column='PIPELINE_VERSION_TAG', default='v1.2.1', max_length=20)),
                ('catalogue_biome_label', models.CharField(db_column='CATALOGUE_BIOME_LABEL', help_text='The biome label for the catalogue (and any others that share the same practical biome). Need not be a GOLD biome, e.g. may include host species.', max_length=100)),
                ('catalogue_type', models.CharField(choices=[('prokaryotes', 'prokaryotes'), ('eukaryotes', 'eukaryotes'), ('viruses', 'viruses')], db_column='CATALOGUE_TYPE', max_length=20)),
                ('other_stats', models.JSONField(blank=True, db_column='OTHER_STATS_JSON', null=True)),
                ('biome', models.ForeignKey(blank=True, db_column='BIOME_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='analyses.biome')),
            ],
            options={
                'db_table': 'genome_catalogue',
                'unique_together': {('catalogue_biome_label', 'version', 'catalogue_type')},
            },
        ),
        migrations.AddField(
            model_name='genome',
            name='catalogue',
            field=models.ForeignKey(db_column='GENOME_CATALOGUE', on_delete=django.db.models.deletion.CASCADE, related_name='genomes', to='genomes.genomecatalogue'),
        ),
        migrations.CreateModel(
            name='GenomeCogCounts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genome_count', models.IntegerField(db_column='GENOME_COUNT')),
                ('cog', models.ForeignKey(db_column='COG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='genomes.genomecogcat')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='genomes.genome')),
            ],
            options={
                'db_table': 'genome_cog_counts',
                'unique_together': {('genome', 'cog')},
            },
        ),
        migrations.AddField(
            model_name='genome',
            name='cog_matches',
            field=models.ManyToManyField(through='genomes.GenomeCogCounts', to='genomes.genomecogcat'),
        ),
        migrations.CreateModel(
            name='GenomeKeggClass',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_id', models.CharField(db_column='CLASS_ID', max_length=10, unique=True)),
                ('name', models.CharField(db_column='NAME', max_length=80)),
                ('parent', models.ForeignKey(db_column='PARENT', null=True, on_delete=django.db.models.deletion.CASCADE, to='genomes.genomekeggclass')),
            ],
            options={
                'db_table': 'genome_kegg_class',
            },
        ),
        migrations.CreateModel(
            name='GenomeKeggClassCounts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genome_count', models.IntegerField(db_column='GENOME_COUNT')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='genomes.genome')),
                ('kegg_class', models.ForeignKey(db_column='KEGG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='genomes.genomekeggclass')),
            ],
            options={
                'db_table': 'genome_kegg_class_counts',
                'unique_together': {('genome', 'kegg_class')},
            },
        ),
        migrations.AddField(
            model_name='genome',
            name='kegg_classes',
            field=models.ManyToManyField(through='genomes.GenomeKeggClassCounts', to='genomes.genomekeggclass'),
        ),
        migrations.CreateModel(
            name='GenomeKeggModuleCounts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genome_count', models.IntegerField(db_column='GENOME_COUNT')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='genomes.genome')),
                ('kegg_module', models.ForeignKey(db_column='KEGG_MODULE', on_delete=django.db.models.deletion.DO_NOTHING, to='genomes.genomekeggmodule')),
            ],
            options={
                'db_table': 'genome_kegg_module_counts',
                'unique_together': {('genome', 'kegg_module')},
            },
        ),
        migrations.AddField(
            model_name='genome',
            name='kegg_modules',
            field=models.ManyToManyField(through='genomes.GenomeKeggModuleCounts', to='genomes.genomekeggmodule'),
        ),
        migrations.AddField(
            model_name='genome',
            name='geo_origin',
            field=models.ForeignKey(blank=True, db_column='GEOGRAPHIC_ORIGIN', null=True, on_delete=django.db.models.deletion.CASCADE, to='genomes.geographiclocation'),
        ),
        migrations.AddField(
            model_name='genome',
            name='pangenome_geographic_range',
            field=models.ManyToManyField(db_table='GENOME_PANGENOME_GEOGRAPHIC_RANGE', related_name='geographic_range', to='genomes.geographiclocation'),
        ),
    ]
