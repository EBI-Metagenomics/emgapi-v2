# Generated by Django 5.2.1 on 2025-06-26 13:29

import django.db.models.deletion
import django.utils.timezone
import genomes.models.genome
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("analyses", "0045_assembly_sample"),
    ]

    operations = [
        migrations.CreateModel(
            name="GeographicLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(db_column="CONTINENT", max_length=80, unique=True),
                ),
            ],
            options={
                "db_table": "geographic_range",
            },
        ),
        migrations.CreateModel(
            name="GenomeCatalogue",
            fields=[
                ("downloads", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "catalogue_id",
                    models.SlugField(
                        db_column="catalogue_id",
                        max_length=100,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("version", models.CharField(db_column="version", max_length=20)),
                (
                    "name",
                    models.CharField(db_column="name", max_length=100, unique=True),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        db_column="description",
                        help_text="This is a description of the catalogue.",
                        null=True,
                    ),
                ),
                (
                    "protein_catalogue_name",
                    models.CharField(
                        blank=True,
                        db_column="protein_catalogue_name",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "protein_catalogue_description",
                    models.TextField(
                        blank=True,
                        db_column="protein_catalogue_description",
                        help_text="Description of the protein catalogue, if applicable.",
                        null=True,
                    ),
                ),
                (
                    "last_update",
                    models.DateTimeField(
                        db_column="LAST_UPDATE", default=django.utils.timezone.now
                    ),
                ),
                (
                    "result_directory",
                    models.CharField(
                        blank=True,
                        db_column="result_directory",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "unclustered_genome_count",
                    models.IntegerField(
                        blank=True,
                        db_column="unclustered_genome_count",
                        help_text="Total number of genomes in the catalogue (including cluster reps and members)",
                        null=True,
                    ),
                ),
                (
                    "ftp_url",
                    models.CharField(
                        db_column="ftp_url",
                        default="http://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/",
                        max_length=200,
                    ),
                ),
                (
                    "pipeline_version_tag",
                    models.CharField(
                        db_column="pipeline_version_tag",
                        default="v1.2.1",
                        max_length=20,
                    ),
                ),
                (
                    "catalogue_biome_label",
                    models.CharField(
                        db_column="catalogue_biome_label",
                        help_text="The biome label for the catalogue (and any others that share the same practical biome). Need not be a GOLD biome, e.g. may include host species.",
                        max_length=100,
                    ),
                ),
                (
                    "catalogue_type",
                    models.CharField(
                        choices=[
                            ("prokaryotes", "prokaryotes"),
                            ("eukaryotes", "eukaryotes"),
                            ("viruses", "viruses"),
                        ],
                        db_column="catalogue_type",
                        max_length=20,
                    ),
                ),
                (
                    "other_stats",
                    models.JSONField(
                        blank=True, db_column="other_stats_json", null=True
                    ),
                ),
                (
                    "biome",
                    models.ForeignKey(
                        blank=True,
                        db_column="biome_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="analyses.biome",
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("catalogue_biome_label", "version", "catalogue_type")
                },
            },
        ),
        migrations.CreateModel(
            name="Genome",
            fields=[
                ("downloads", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "genome_id",
                    models.AutoField(
                        db_column="genome_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "accession",
                    models.CharField(
                        db_column="genome_accession", max_length=40, unique=True
                    ),
                ),
                (
                    "ena_genome_accession",
                    models.CharField(
                        blank=True,
                        db_column="ena_genome_accession",
                        max_length=20,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "ena_sample_accession",
                    models.CharField(
                        blank=True,
                        db_column="ena_sample_accession",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "ena_study_accession",
                    models.CharField(
                        db_column="ena_study_accession", max_length=20, null=True
                    ),
                ),
                (
                    "ncbi_genome_accession",
                    models.CharField(
                        blank=True,
                        db_column="ncbi_genome_accession",
                        max_length=20,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "ncbi_sample_accession",
                    models.CharField(
                        blank=True,
                        db_column="ncbi_sample_accession",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "ncbi_study_accession",
                    models.CharField(
                        blank=True,
                        db_column="ncbi_study_accession",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "img_genome_accession",
                    models.CharField(
                        blank=True,
                        db_column="img_genome_accession",
                        max_length=20,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "patric_genome_accession",
                    models.CharField(
                        blank=True,
                        db_column="patric_genome_accession",
                        max_length=20,
                        null=True,
                        unique=True,
                    ),
                ),
                ("length", models.IntegerField(db_column="length")),
                ("num_contigs", models.IntegerField(db_column="n_contigs")),
                ("n_50", models.IntegerField(db_column="n50")),
                ("gc_content", models.FloatField(db_column="gc_content")),
                (
                    "type",
                    models.CharField(
                        choices=[("mag", "MAG"), ("isolate", "Isolate")],
                        db_column="type",
                        max_length=80,
                    ),
                ),
                ("completeness", models.FloatField(db_column="completeness")),
                ("contamination", models.FloatField(db_column="contamination")),
                (
                    "busco_completeness",
                    models.FloatField(
                        blank=True, db_column="busco_completeness", null=True
                    ),
                ),
                (
                    "rna_5s",
                    models.FloatField(blank=True, db_column="rna_5s", null=True),
                ),
                (
                    "rna_16s",
                    models.FloatField(blank=True, db_column="rna_16s", null=True),
                ),
                (
                    "rna_23s",
                    models.FloatField(blank=True, db_column="rna_23s", null=True),
                ),
                (
                    "rna_5_8s",
                    models.FloatField(blank=True, db_column="rna_5_8s", null=True),
                ),
                (
                    "rna_18s",
                    models.FloatField(blank=True, db_column="rna_18s", null=True),
                ),
                (
                    "rna_28s",
                    models.FloatField(blank=True, db_column="rna_28s", null=True),
                ),
                ("trnas", models.FloatField(db_column="t_rna")),
                ("nc_rnas", models.IntegerField(db_column="nc_rna")),
                ("num_proteins", models.IntegerField(db_column="num_proteins")),
                ("eggnog_coverage", models.FloatField(db_column="eggnog_coverage")),
                ("ipr_coverage", models.FloatField(db_column="ipr_coverage")),
                (
                    "taxon_lineage",
                    models.CharField(db_column="taxon_lineage", max_length=400),
                ),
                (
                    "num_genomes_total",
                    models.IntegerField(
                        blank=True, db_column="pangenome_total_genomes", null=True
                    ),
                ),
                (
                    "pangenome_size",
                    models.IntegerField(
                        blank=True, db_column="pangenome_size", null=True
                    ),
                ),
                (
                    "pangenome_core_size",
                    models.IntegerField(
                        blank=True, db_column="pangenome_core_prop", null=True
                    ),
                ),
                (
                    "pangenome_accessory_size",
                    models.IntegerField(
                        blank=True, db_column="pangenome_accessory_prop", null=True
                    ),
                ),
                (
                    "annotations",
                    models.JSONField(
                        db_column="annotations",
                        default=genomes.models.genome.default_annotations,
                    ),
                ),
                (
                    "last_update",
                    models.DateTimeField(auto_now=True, db_column="last_update"),
                ),
                (
                    "first_created",
                    models.DateTimeField(auto_now_add=True, db_column="first_created"),
                ),
                (
                    "result_directory",
                    models.CharField(
                        blank=True,
                        db_column="result_directory",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "biome",
                    models.ForeignKey(
                        db_column="biome_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="analyses.biome",
                    ),
                ),
                (
                    "catalogue",
                    models.ForeignKey(
                        db_column="genome_catalogue",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="genomes",
                        to="genomes.genomecatalogue",
                    ),
                ),
                (
                    "geo_origin",
                    models.ForeignKey(
                        blank=True,
                        db_column="geographic_origin",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genomes.geographiclocation",
                    ),
                ),
                (
                    "pangenome_geographic_range",
                    models.ManyToManyField(
                        db_table="genome_pangenome_geographic_range",
                        related_name="geographic_range",
                        to="genomes.geographiclocation",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
