# Generated by Django 5.2.1 on 2025-07-15 18:44

import django.contrib.postgres.fields
import django.db.models.deletion
import genomes.models.genome
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('analyses', '0045_assembly_sample'),
    ]

    operations = [
        migrations.CreateModel(
            name='GenomeCatalogue',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('downloads', models.JSONField(blank=True, default=list)),
                ('catalogue_id', models.SlugField(db_column='catalogue_id', max_length=100, primary_key=True, serialize=False)),
                ('version', models.CharField(db_column='version', max_length=20)),
                ('name', models.CharField(db_column='name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, db_column='description', help_text='This is a description of the catalogue.', null=True)),
                ('protein_catalogue_name', models.CharField(blank=True, db_column='protein_catalogue_name', max_length=100, null=True)),
                ('protein_catalogue_description', models.TextField(blank=True, db_column='protein_catalogue_description', help_text='Description of the protein catalogue, if applicable.', null=True)),
                ('result_directory', models.CharField(blank=True, db_column='result_directory', max_length=100, null=True)),
                ('unclustered_genome_count', models.IntegerField(blank=True, db_column='unclustered_genome_count', help_text='Total number of genomes in the catalogue (including cluster reps and members)', null=True)),
                ('ftp_url', models.CharField(db_column='ftp_url', default='http://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/', max_length=200)),
                ('pipeline_version_tag', models.CharField(db_column='pipeline_version_tag', default='v1.2.1', max_length=20)),
                ('catalogue_biome_label', models.CharField(db_column='catalogue_biome_label', help_text='The biome label for the catalogue (and any others that share the same practical biome). Need not be a GOLD biome, e.g. may include host species.', max_length=100)),
                ('catalogue_type', models.CharField(choices=[('prokaryotes', 'prokaryotes'), ('eukaryotes', 'eukaryotes'), ('viruses', 'viruses')], db_column='catalogue_type', max_length=20)),
                ('other_stats', models.JSONField(blank=True, db_column='other_stats_json', null=True)),
                ('biome', models.ForeignKey(blank=True, db_column='biome_id', null=True, on_delete=django.db.models.deletion.PROTECT, to='analyses.biome')),
            ],
            options={
                'unique_together': {('catalogue_biome_label', 'version', 'catalogue_type')},
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('downloads', models.JSONField(blank=True, default=list)),
                ('genome_id', models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=40, unique=True)),
                ('ena_genome_accession', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('ena_sample_accession', models.CharField(blank=True, max_length=20, null=True)),
                ('ena_study_accession', models.CharField(max_length=20, null=True)),
                ('ncbi_genome_accession', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('ncbi_sample_accession', models.CharField(blank=True, max_length=20, null=True)),
                ('ncbi_study_accession', models.CharField(blank=True, max_length=20, null=True)),
                ('img_genome_accession', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('patric_genome_accession', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('length', models.IntegerField()),
                ('num_contigs', models.IntegerField()),
                ('n_50', models.IntegerField()),
                ('gc_content', models.FloatField()),
                ('type', models.CharField(choices=[('mag', 'MAG'), ('isolate', 'Isolate')], max_length=80)),
                ('completeness', models.FloatField()),
                ('contamination', models.FloatField()),
                ('busco_completeness', models.FloatField(blank=True, null=True)),
                ('rna_5s', models.FloatField(blank=True, null=True)),
                ('rna_16s', models.FloatField(blank=True, null=True)),
                ('rna_23s', models.FloatField(blank=True, null=True)),
                ('rna_5_8s', models.FloatField(blank=True, null=True)),
                ('rna_18s', models.FloatField(blank=True, null=True)),
                ('rna_28s', models.FloatField(blank=True, null=True)),
                ('trnas', models.FloatField()),
                ('nc_rnas', models.IntegerField()),
                ('num_proteins', models.IntegerField()),
                ('eggnog_coverage', models.FloatField()),
                ('ipr_coverage', models.FloatField()),
                ('taxon_lineage', models.CharField(max_length=400)),
                ('num_genomes_total', models.IntegerField(blank=True, null=True)),
                ('pangenome_size', models.IntegerField(blank=True, null=True)),
                ('pangenome_core_size', models.IntegerField(blank=True, null=True)),
                ('pangenome_accessory_size', models.IntegerField(blank=True, null=True)),
                ('annotations', models.JSONField(default=genomes.models.genome.default_annotations)),
                ('result_directory', models.CharField(blank=True, max_length=100, null=True)),
                ('geographic_range', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=80), blank=True, help_text='Array of geographic locations where this genome is found', null=True, size=None)),
                ('geographic_origin', models.CharField(blank=True, help_text='Geographic origin of this genome', max_length=80, null=True)),
                ('biome', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='analyses.biome')),
                ('catalogue', models.ForeignKey(db_column='genome_catalogue', on_delete=django.db.models.deletion.PROTECT, related_name='genomes', to='genomes.genomecatalogue')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
