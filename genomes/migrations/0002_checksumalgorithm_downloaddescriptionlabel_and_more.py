# Generated by Django 5.2 on 2025-05-13 14:32

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("genomes", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChecksumAlgorithm",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(db_column="NAME", max_length=255, unique=True),
                ),
            ],
            options={
                "db_table": "checksum_algorithm",
            },
        ),
        migrations.CreateModel(
            name="DownloadDescriptionLabel",
            fields=[
                (
                    "description_id",
                    models.AutoField(
                        db_column="DESCRIPTION_ID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "description",
                    models.CharField(db_column="DESCRIPTION", max_length=255),
                ),
                (
                    "description_label",
                    models.CharField(db_column="DESCRIPTION_LABEL", max_length=100),
                ),
            ],
            options={
                "db_table": "download_description_label",
            },
        ),
        migrations.CreateModel(
            name="DownloadGroupType",
            fields=[
                (
                    "group_id",
                    models.AutoField(
                        db_column="GROUP_ID", primary_key=True, serialize=False
                    ),
                ),
                ("group_type", models.CharField(db_column="GROUP_TYPE", max_length=30)),
            ],
            options={
                "db_table": "DOWNLOAD_GROUP_TYPE",
            },
        ),
        migrations.CreateModel(
            name="DownloadSubdir",
            fields=[
                (
                    "subdir_id",
                    models.AutoField(
                        db_column="SUBDIR_ID", primary_key=True, serialize=False
                    ),
                ),
                ("subdir", models.CharField(db_column="SUBDIR", max_length=100)),
            ],
            options={
                "db_table": "DOWNLOAD_SUBDIR",
            },
        ),
        migrations.CreateModel(
            name="FileFormat",
            fields=[
                (
                    "format_id",
                    models.AutoField(
                        db_column="FORMAT_ID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "format_name",
                    models.CharField(db_column="FORMAT_NAME", max_length=30),
                ),
                (
                    "format_extension",
                    models.CharField(db_column="FORMAT_EXTENSION", max_length=30),
                ),
                (
                    "compression",
                    models.BooleanField(db_column="COMPRESSION", default=True),
                ),
            ],
            options={
                "db_table": "FILE_FORMAT",
            },
        ),
        migrations.CreateModel(
            name="GenomeSet",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(db_column="NAME", max_length=40, unique=True),
                ),
            ],
            options={
                "db_table": "GENOME_SET",
            },
        ),
        migrations.AddField(
            model_name="genome",
            name="downloads",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AlterField(
            model_name="genome",
            name="pangenome_geographic_range",
            field=models.ManyToManyField(
                db_table="genome_pangenome_geographic_range",
                related_name="geographic_range",
                to="genomes.geographiclocation",
            ),
        ),
        migrations.AlterModelTable(
            name="genome",
            table=None,
        ),
        migrations.CreateModel(
            name="GenomeCatalogueDownload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("realname", models.CharField(db_column="REAL_NAME", max_length=255)),
                ("alias", models.CharField(db_column="ALIAS", max_length=255)),
                (
                    "file_checksum",
                    models.CharField(blank=True, db_column="CHECKSUM", max_length=255),
                ),
                (
                    "checksum_algorithm",
                    models.ForeignKey(
                        blank=True,
                        db_column="CHECKSUM_ALGORITHM",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genomes.checksumalgorithm",
                    ),
                ),
                (
                    "description",
                    models.ForeignKey(
                        blank=True,
                        db_column="DESCRIPTION_ID",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genomes.downloaddescriptionlabel",
                    ),
                ),
                (
                    "file_format",
                    models.ForeignKey(
                        blank=True,
                        db_column="FORMAT_ID",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genomes.fileformat",
                    ),
                ),
                (
                    "genome_catalogue",
                    models.ForeignKey(
                        db_column="GENOME_CATALOGUE_ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genomes.genomecatalogue",
                    ),
                ),
                (
                    "group_type",
                    models.ForeignKey(
                        blank=True,
                        db_column="GROUP_ID",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genomes.downloadgrouptype",
                    ),
                ),
                (
                    "parent_id",
                    models.ForeignKey(
                        blank=True,
                        db_column="PARENT_DOWNLOAD_ID",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parent",
                        to="genomes.genomecataloguedownload",
                    ),
                ),
                (
                    "subdir",
                    models.ForeignKey(
                        blank=True,
                        db_column="SUBDIR_ID",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genomes.downloadsubdir",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
