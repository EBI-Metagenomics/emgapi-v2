import pathlib
import shlex
from pathlib import Path
from typing import Optional

import pandas as pd


def get_mtime(file_: pathlib.Path):
    return file_.stat().st_mtime


def maybe_get_nextflow_trace_file(
    workdir: Path, command: str, check_existence: bool = True
) -> Optional[Path]:
    """
    Get the expected trace file location from a Nextflow run comment, if one appears to exist.
    This method will first look for whether the user set the `-with-trace` flag, which s
    pecifies the file to be used as the trace.

    If not, it will search in the workdir (this is the Nextflow results folder) for a
    folder named `pipeline_info`. This is a convention used by nf-core like pipelines.

    :param workdir: The working dir of nextflow
    :param command: The nextflow run command
    :param check_existence: Whether to check the file actually exists on the filesystem
    :return: The path to the trace file, if known/expected.
    """
    trace_file_location = None

    cli_args = shlex.split(command)
    cli_args = {
        arg: True if param.startswith("-") else param
        for arg, param in zip(cli_args, cli_args[1:] + ["--"])
        if arg.startswith("-")
    }
    if "-with-trace" in cli_args:
        print("Expecting a trace file because command includes `with-trace`")
        trace_file_location = Path(cli_args["-with-trace"])

        if not trace_file_location.is_absolute():
            trace_file_location = workdir / trace_file_location

        print(f"Trace file should be at {trace_file_location}")
    else:
        # The trace flag takes precedence; otherwise, look for the trace files
        # in the `pipeline_info` folderâ€”this is a ~nf-core convention.
        pipeline_info = workdir / "pipeline_info"
        if pipeline_info.exists():
            # There can be many trace files, i.e., retries.
            # The assumption is that the last trace file is the one generated by a successful execution of the pipeline.
            trace_files = [
                trace_file
                for trace_file in pipeline_info.glob("execution_trace_*.txt")
                if trace_file.is_file()
            ]

            trace_file_location = None
            latest_mtime = None

            for trace_file in trace_files:
                mtime = trace_file.stat().st_mtime
                if latest_mtime is None or mtime > latest_mtime:
                    latest_mtime = mtime
                    trace_file_location = trace_file

            if trace_file_location:
                print(f"Trace file should be at {trace_file_location}")

    if trace_file_location and check_existence:
        if not trace_file_location.exists():
            print(
                f"Expected a trace file at {trace_file_location}, but it does not exist"
            )
            return None

    return trace_file_location


def maybe_get_nextflow_trace_df(workdir: Path, command: str) -> Optional[pd.DataFrame]:
    """
    Get the trace file content of a nextflow run comment, if one appears to exist.

    :param workdir: The working dir of nextflow
    :param command: The nextflow run command
    :return: The trace file content as a pandas dataframe.
    """
    trace_file_location = maybe_get_nextflow_trace_file(workdir, command)
    if trace_file_location is not None:
        print("Reading trace file into dataframe...")
        return pd.read_csv(trace_file_location, sep="\t")
